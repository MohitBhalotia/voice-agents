// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
  engineType      = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String    @id @default(uuid())
  email                  String    @unique
  passwordHash           String
  fullName               String  
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  last_login_at          DateTime?
  is_verified            Boolean   @default(false)
  verification_token     String?
  reset_password_token   String?
  reset_password_expires DateTime?
  Agent                  Agent[]
}

model Agent {
  id               String              @id @default(uuid())
  userId           String
  name             String
  templateId       String?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  user             User                @relation(fields: [userId], references: [id])
  configuration    AgentConfiguration?
  knowledgeSources KnowledgeSource[]
  callLogs         CallLog[]
}

model AgentConfiguration {
  id           String @id @default(uuid())
  agentId      String @unique
  llmModel     String
  systemPrompt String
  firstMessage String
  temperature  Float
  voiceId      String
  agent        Agent  @relation(fields: [agentId], references: [id])
}

model KnowledgeSource {
  id          String   @id @default(uuid())
  agentId     String
  sourceType  String // 'pdf' or 'txt'
  storagePath String
  createdAt   DateTime @default(now())
  agent       Agent    @relation(fields: [agentId], references: [id])
}

model CallLog {
  id              String           @id @default(uuid())
  agentId         String
  startTime       DateTime
  endTime         DateTime?
  durationSeconds Int?
  status          String // 'active', 'completed', 'failed'
  agent           Agent            @relation(fields: [agentId], references: [id])
  transcripts     CallTranscript[]
}

model CallTranscript {
  id          String   @id @default(uuid())
  callLogId   String
  speaker     String // 'user' or 'agent'
  messageText String
  timestamp   DateTime @default(now())
  callLog     CallLog  @relation(fields: [callLogId], references: [id])
}
